{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import json\n",
    "from pandas.io.json import json_normalize\n",
    "\n",
    "%pylab inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Number 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#load in via pandas\n",
    "wbp = pd.read_json('world_bank_projects.json', orient = 'table')\n",
    "wbpl = pd.read_json('world_bank_projects_less.json', orient = 'table')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#bring together the two Df's\n",
    "wbp2 = wbp.append(wbpl)\n",
    "\n",
    "#I used .info(), .describe(), and .head() but removed them for brevity/polish"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "countryname\n",
       "Republic of Indonesia              19\n",
       "People's Republic of China         19\n",
       "Socialist Republic of Vietnam      17\n",
       "Republic of India                  16\n",
       "Republic of Yemen                  13\n",
       "People's Republic of Bangladesh    12\n",
       "Nepal                              12\n",
       "Kingdom of Morocco                 12\n",
       "Africa                             11\n",
       "Republic of Mozambique             11\n",
       "dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#groupby country code, then find the size of each amalgamation, then sort\n",
    "wbp2.groupby('countryname').size().sort_values(ascending = False).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Number 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#after near infinite hours, decided to bring in using json and normalize\n",
    "with open('world_bank_projects.json') as j:\n",
    "    f1 = json.load(j)\n",
    "df1 = json_normalize(f1, 'mjtheme_namecode',['id'])\n",
    "\n",
    "\n",
    "with open('world_bank_projects_less.json') as j:\n",
    "    f2 = json.load(j)\n",
    "#normalize using the column we need to measure (ID as well so we can merge on it later)\n",
    "df2 = json_normalize(f2, 'mjtheme_namecode',['id'])\n",
    "#concatenate them together\n",
    "df = df1.append(df2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "code\n",
       "11    251\n",
       "10    216\n",
       "8     211\n",
       "2     199\n",
       "6     169\n",
       "4     146\n",
       "7     130\n",
       "5      77\n",
       "9      50\n",
       "1      39\n",
       "3      15\n",
       "dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#groupby code and sort to find which codes are most used\n",
    "df.groupby('code').size().sort_values(ascending = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Number 3\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "My plan was to bring in the names from the mjtheme column and join on ID with the mjtheme_namecode-containing table, but it is not working. I tried both bringing the json in and normalizing, and pd.read_json and splitting the lists that are contained within the various cells. I spent a good 6 hours trying various approaches, only to met with various errors that I could not figure out. Stackoverflow and I got really close, as did the forums on springboard. One of the mentors posted similar code to that shown below as a help for people in a similar situation to me."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 10 Major World Bank Project Themes:\n",
      "Environment and natural resources management    223\n",
      "Rural development                               202\n",
      "Human development                               198\n",
      "Public sector governance                        184\n",
      "Social protection and risk management           159\n",
      "Financial and private sector development        130\n",
      "Social dev/gender/inclusion                     119\n",
      "Trade and integration                            72\n",
      "Urban development                                47\n",
      "Economic management                              34\n",
      "Name: name, dtype: int64\n",
      "   code               name       id         name_clean\n",
      "0     8  Human development  P129828  Human development\n",
      "41    8  Human development  P132616  Human development\n",
      "43    8  Human development  P146271  Human development\n",
      "44    8  Human development  P146271  Human development\n",
      "47    8  Human development  P146271  Human development\n",
      "57    8  Human development  P146109  Human development\n",
      "58    8  Human development  P146109  Human development\n",
      "69    8  Human development  P143025  Human development\n",
      "79    8  Human development  P122700  Human development\n",
      "91    8  Human development  P145118  Human development\n"
     ]
    }
   ],
   "source": [
    "#Use pandas to bring in a messy version with all the information\n",
    "df0 = pd.read_json('world_bank_projects.json')\n",
    "df1 = pd.read_json('world_bank_projects_less.json')\n",
    "\n",
    "#bring in a JSON that can be refined to have the information we are particularly interested in\n",
    "with open('world_bank_projects.json') as f:    \n",
    "    raw = json.load(f)\n",
    "with open('world_bank_projects_less.json') as f:    \n",
    "    raw1 = json.load(f)\n",
    "\n",
    "#We know ID will help us join the correct names later on\n",
    "df_themes0 = json_normalize(raw, 'mjtheme_namecode', ['id'])\n",
    "df_themes1 = json_normalize(raw1, 'mjtheme_namecode', ['id'])\n",
    "\n",
    "df_themes = df_themes0.append(df_themes1)\n",
    "df = df0.append(df1)\n",
    "\n",
    "# Here we see a number of projects with multiple codes, meaning the project spans many themes\n",
    "df_themes.groupby('id').code.nunique().sort_values(ascending=False).head(10)\n",
    "\n",
    "# Addtionally we have the problems of a missing theme name. I was able to get this far, but then I was quickly derailed\n",
    "print 'Top 10 Major World Bank Project Themes:'\n",
    "print (df_themes[df_themes != ''].name.value_counts().head(10))\n",
    "\n",
    "# The holy grail (at least in my tired opinion)\n",
    "df_themes_name_to_code = df_themes.groupby('name').code.max().sort_values(ascending=False)\n",
    "\n",
    "# drop the missing name rows\n",
    "df_themes_name_to_code = df_themes_name_to_code[df_themes_name_to_code.index != '']\n",
    "\n",
    "# convert to df\n",
    "df_themes_name_to_code = pd.DataFrame(df_themes_name_to_code,columns=['code'])\n",
    "\n",
    "# pull name into a column\n",
    "df_themes_name_to_code['name_clean'] = df_themes_name_to_code.index\n",
    "\n",
    "# set code to be the index\n",
    "df_themes_code_to_name = df_themes_name_to_code.set_index(['code'])\n",
    "\n",
    "\n",
    "# now merge on the name based on the code for the missing projects\n",
    "\n",
    "df_themes_clean = df_themes.merge(df_themes_code_to_name,how='outer',left_on=['code'],right_index=True)\n",
    "\n",
    "df_final = df_themes_clean.drop('name')\n",
    "\n",
    "#drop is no cooperating?\n",
    "\n",
    "print(df_final[df_final != ''].dropna().head(10))\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
